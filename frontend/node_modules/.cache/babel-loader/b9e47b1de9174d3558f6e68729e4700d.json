{"ast":null,"code":"import _slicedToArray from \"/home/walder/workspaces/fullstack_webdev/fullstack_webdev_ass8/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/walder/workspaces/fullstack_webdev/fullstack_webdev_ass8/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/walder/workspaces/fullstack_webdev/fullstack_webdev_ass8/frontend/src/App.js\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  allBooks {\\n    title,\\n    published,\\n  }\\n}\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  allAuthors {\\n    name,\\n    born,\\n    id\\n  }\\n}\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n\\n  mutation setBirthyear($name: String!, $birthyear: Int!){\\n      editAuthor(\\n        name: $name,\\n        setBornTo: $birthyear\\n      ){\\n        name\\n        born\\n      }\\n  }\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation newBook($title: String!, $author: String!, $published: Int!, $genres: [String!]){\\n     addBook(\\n      title: $title,\\n      author: $author,\\n      published: $published,\\n      genres: $genres\\n      ){\\n        title\\n        published\\n        genres\\n      }\\n}\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport Authors from './components/Authors';\nimport Books from './components/Books';\nimport NewBook from './components/NewBook';\nimport SetBirthyear from './components/SetBirthyear';\nimport { gql } from 'apollo-boost';\nimport { Query, Mutation } from 'react-apollo';\nimport LoginForm from './components/LoginForm';\nconst NEW_BOOK = gql(_templateObject());\nconst NEW_BIRTHYEAR = gql(_templateObject2());\nconst ALL_AUTHORS = gql(_templateObject3());\nconst ALL_BOOKS = gql(_templateObject4());\n\nconst App = () => {\n  const _useState = useState('authors'),\n        _useState2 = _slicedToArray(_useState, 2),\n        page = _useState2[0],\n        setPage = _useState2[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setPage('authors'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"authors\"), React.createElement(\"button\", {\n    onClick: () => setPage('books'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"books\"), React.createElement(\"button\", {\n    onClick: () => setPage('add'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"add book\"), React.createElement(\"button\", {\n    onClick: () => setPage('set'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"set birthyear\")), React.createElement(Query, {\n    query: ALL_AUTHORS,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, result => React.createElement(Authors, {\n    show: page === 'authors',\n    result: result,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })), React.createElement(Query, {\n    query: ALL_BOOKS,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, result => React.createElement(Books, {\n    show: page === 'books',\n    result: result,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(Mutation, {\n    mutation: NEW_BOOK,\n    refetchQueries: [{\n      query: ALL_BOOKS\n    }, {\n      query: ALL_AUTHORS\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, addBook => React.createElement(NewBook, {\n    show: page === 'add',\n    addBook: addBook,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), React.createElement(Mutation, {\n    mutation: NEW_BIRTHYEAR,\n    refetchQueries: [{\n      query: ALL_BOOKS\n    }, {\n      query: ALL_AUTHORS\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, setYear => React.createElement(SetBirthyear, {\n    show: page === 'set',\n    setYear: setYear,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/walder/workspaces/fullstack_webdev/fullstack_webdev_ass8/frontend/src/App.js"],"names":["React","useState","Authors","Books","NewBook","SetBirthyear","gql","Query","Mutation","LoginForm","NEW_BOOK","NEW_BIRTHYEAR","ALL_AUTHORS","ALL_BOOKS","App","page","setPage","result","query","addBook","setYear"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Authors from './components/Authors'\nimport Books from './components/Books'\nimport NewBook from './components/NewBook'\nimport SetBirthyear from './components/SetBirthyear'\nimport { gql } from 'apollo-boost'\nimport { Query, Mutation } from 'react-apollo'\nimport LoginForm from './components/LoginForm'\n\n\n\n\nconst NEW_BOOK = gql`\n  mutation newBook($title: String!, $author: String!, $published: Int!, $genres: [String!]){\n     addBook(\n      title: $title,\n      author: $author,\n      published: $published,\n      genres: $genres\n      ){\n        title\n        published\n        genres\n      }\n}`\n\n\nconst NEW_BIRTHYEAR = gql `\n\n  mutation setBirthyear($name: String!, $birthyear: Int!){\n      editAuthor(\n        name: $name,\n        setBornTo: $birthyear\n      ){\n        name\n        born\n      }\n  }`\n\nconst ALL_AUTHORS = gql`\n{\n  allAuthors {\n    name,\n    born,\n    id\n  }\n}\n`\n\nconst ALL_BOOKS = gql`\n{\n  allBooks {\n    title,\n    published,\n  }\n}\n`\n\nconst App = () => {\n  const [page, setPage] = useState('authors')\n    \n\n   return (\n    <div>\n      <div>\n        <button onClick={() => setPage('authors')}>authors</button>\n        <button onClick={() => setPage('books')}>books</button>\n        <button onClick={() => setPage('add')}>add book</button>\n        <button onClick={() => setPage('set')}>set birthyear</button>\n      </div>\n\n      <Query query={ALL_AUTHORS}>\n        {(result) => \n          <Authors\n            show={page === 'authors'} result={result} \n          />}\n      </Query>\n\n      <Query query={ALL_BOOKS}>\n        {(result) => \n          <Books\n            show={page === 'books'} result={result}\n          />}\n      </Query>\n      <Mutation \n        mutation={NEW_BOOK}\n        refetchQueries={[{query: ALL_BOOKS},{query: ALL_AUTHORS}]}>\n        {(addBook) => \n          <NewBook show={page ==='add'} addBook={addBook} />\n        }\n      </Mutation>\n      <Mutation \n        mutation={NEW_BIRTHYEAR}\n        refetchQueries={[{query: ALL_BOOKS},{query: ALL_AUTHORS}]}>\n        {(setYear) => \n           <SetBirthyear show={page ==='set'} setYear={setYear}/> }      \n      </Mutation>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}