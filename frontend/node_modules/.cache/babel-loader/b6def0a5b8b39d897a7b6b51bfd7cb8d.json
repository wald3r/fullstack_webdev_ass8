{"ast":null,"code":"import _defineProperty from \"/home/walder/workspaces/fullstack_webdev/fullstack_webdev_ass8/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/walder/workspaces/fullstack_webdev/fullstack_webdev_ass8/frontend/src/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport { split } from 'apollo-link';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost:4000/graphql\",\n  options: {\n    reconnect: true\n  }\n});\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem('whatever-token');\n  return {\n    headers: _objectSpread({}, headers, {\n      authorization: token ? \"bearer \".concat(token) : null\n    })\n  };\n});\nconst link = split(({\n  query\n}) => {\n  const _getMainDefinition = getMainDefinition(query),\n        kind = _getMainDefinition.kind,\n        operation = _getMainDefinition.operation;\n\n  return kind === 'OperationDefinition' && operation === 'subscription';\n}, wsLink, authLink.concat(httpLink));\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51\n  },\n  __self: this\n})), document.getElementById('root'));","map":{"version":3,"sources":["/home/walder/workspaces/fullstack_webdev/fullstack_webdev_ass8/frontend/src/index.js"],"names":["React","ReactDOM","App","ApolloProvider","ApolloClient","createHttpLink","InMemoryCache","setContext","split","WebSocketLink","getMainDefinition","wsLink","uri","options","reconnect","httpLink","authLink","_","headers","token","localStorage","getItem","authorization","link","query","kind","operation","concat","client","cache","render","document","getElementById"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,SAASC,cAAT,QAA+B,qBAA/B;AAEA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AAEA,MAAMC,MAAM,GAAG,IAAIF,aAAJ,CAAkB;AAC/BG,EAAAA,GAAG,+BAD4B;AAE/BC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,SAAS,EAAE;AAAb;AAFsB,CAAlB,CAAf;AAKA,MAAMC,QAAQ,GAAGV,cAAc,CAAC;AAC9BO,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMI,QAAQ,GAAGT,UAAU,CAAC,CAACU,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAd;AACA,SAAO;AACLH,IAAAA,OAAO,oBACFA,OADE;AAELI,MAAAA,aAAa,EAAEH,KAAK,oBAAaA,KAAb,IAAuB;AAFtC;AADF,GAAP;AAMD,CAR0B,CAA3B;AAUA,MAAMI,IAAI,GAAGf,KAAK,CAChB,CAAC;AAAEgB,EAAAA;AAAF,CAAD,KAAe;AAAA,6BACed,iBAAiB,CAACc,KAAD,CADhC;AAAA,QACLC,IADK,sBACLA,IADK;AAAA,QACCC,SADD,sBACCA,SADD;;AAEb,SAAOD,IAAI,KAAK,qBAAT,IAAkCC,SAAS,KAAK,cAAvD;AACD,CAJe,EAKhBf,MALgB,EAMhBK,QAAQ,CAACW,MAAT,CAAgBZ,QAAhB,CANgB,CAAlB;AASA,MAAMa,MAAM,GAAG,IAAIxB,YAAJ,CAAiB;AAC9BmB,EAAAA,IAD8B;AAE9BM,EAAAA,KAAK,EAAE,IAAIvB,aAAJ;AAFuB,CAAjB,CAAf;AAKAL,QAAQ,CAAC6B,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql`,\n  options: { reconnect: true }\n})\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql',\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('whatever-token')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}