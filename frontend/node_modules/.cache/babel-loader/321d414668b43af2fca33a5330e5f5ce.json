{"ast":null,"code":"import _defineProperty from \"/home/walder/workspaces/fullstack_webdev/fullstack_webdev_ass8/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/walder/workspaces/fullstack_webdev/fullstack_webdev_ass8/frontend/src/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem('whatever-user-token');\n  console.log(token);\n  return {\n    headers: _objectSpread({}, headers, {\n      authorization: token ? \"bearer \".concat(token) : null\n    })\n  };\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n})), document.getElementById('root'));","map":{"version":3,"sources":["/home/walder/workspaces/fullstack_webdev/fullstack_webdev_ass8/frontend/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","ApolloProvider","createHttpLink","InMemoryCache","setContext","httpLink","uri","authLink","_","headers","token","localStorage","getItem","console","log","authorization","client","link","concat","cache","render","document","getElementById"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA8B,cAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;AAC9BI,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,qBAArB,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,SAAO;AACLD,IAAAA,OAAO,oBACFA,OADE;AAELM,MAAAA,aAAa,EAAEL,KAAK,oBAAaA,KAAb,IAAuB;AAFtC;AADF,GAAP;AAMD,CAT0B,CAA3B;AAWA,MAAMM,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AAC9BiB,EAAAA,IAAI,EAAEV,QAAQ,CAACW,MAAT,CAAgBb,QAAhB,CADwB;AAE9Bc,EAAAA,KAAK,EAAE,IAAIhB,aAAJ;AAFuB,CAAjB,CAAf;AAMAL,QAAQ,CAACsB,MAAT,CACI,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEJ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAIKK,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJL","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider }from 'react-apollo'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql',\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('whatever-user-token')\n  console.log(token)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n})\n\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n     document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}